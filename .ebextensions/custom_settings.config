option_settings:
# Setup cloudwatch logs settings
  aws:elasticbeanstalk:cloudwatch:logs:
    StreamLogs: true
    DeleteOnTerminate: false
    RetentionInDays: 180
# Setup HTTPS connection approval
  aws:elbv2:listener:443:
    ListenerEnabled: 'true'
    Protocol: HTTPS
    SSLCertificateArns: arn:aws:acm:eu-west-2:886723564473:certificate/fed60a2d-f718-4851-a429-31c7800b0adf

container_commands:
# Remove the current proxy configuration setting
  removeconfig:
    command: "rm -f /tmp/deployment/config/#etc#nginx#conf.d#00_elastic_beanstalk_proxy.conf /etc/nginx/conf.d/00_elastic_beanstalk_proxy.conf"

files:
  "/etc/nginx/conf.d/proxy.conf":
     owner: root
     group: root
     mode: "000755"
     content: |      
      upstream nodejs {
          server 127.0.0.1:8081;
          keepalive 256;
      }      
      server {
          listen 8080;      
          if ($time_iso8601 ~ "^(\d{4})-(\d{2})-(\d{2})T(\d{2})") {
              set $year $1;
              set $month $2;
              set $day $3;
              set $hour $4;
          }
          access_log /var/log/nginx/healthd/application.log.$year-$month-$day-$hour healthd;
          access_log  /var/log/nginx/access.log  main;
          location / {
              set $redirect 0;
              if ($http_x_forwarded_proto != "https") {
                set $redirect 1;
              }
              if ($http_user_agent ~* "ELB-HealthChecker") {
                set $redirect 0;
              }
              if ($redirect = 1) {
                return 301 https://$host$request_uri;
              }      
              proxy_pass  http://nodejs;
              proxy_set_header   Connection "";
              proxy_http_version 1.1;
              proxy_set_header        Host            $host;
              proxy_set_header        X-Real-IP       $remote_addr;
              proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
          }      
      gzip on;
      gzip_comp_level 4;
      gzip_types text/html text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
      }
  "/opt/elasticbeanstalk/env.vars":
    mode: "000775"
    owner: root
    group: root
    content: |
      EB_NODE_VERSION=$(/opt/elasticbeanstalk/bin/get-config optionsettings -n aws:elasticbeanstalk:container:nodejs -o NodeVersion)
      export PATH=/opt/elasticbeanstalk/node-install/node-v$EB_NODE_VERSION-linux-x64/bin:$PATH
      export HOME=$(/opt/elasticbeanstalk/bin/get-config container -k app_user_home)
      EB_APP_STAGING_DIR=$(/opt/elasticbeanstalk/bin/get-config container -k app_staging_dir)
      EB_APP_DEPLOY_DIR=$(/opt/elasticbeanstalk/bin/get-config container -k app_deploy_dir)
      eval $(node -e "var vars = JSON.parse('$(/opt/elasticbeanstalk/bin/get-config environment)'); console.info(Object.keys(vars).map((key) => \`export \${key}=\"\${vars[key]}\"\`).join('\n'));")
  "/opt/elasticbeanstalk/hooks/appdeploy/pre/45npm_downgrade.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/usr/bin/env bash
      . /opt/elasticbeanstalk/env.vars
      if [ $(npm -v) != "2.15.9" ]; then
        echo "Downgrading npm to 2.15.9..."
        npm install npm@2.15.9 -g
      else
        echo "npm already at 2.15.9"
      fi
  "/opt/elasticbeanstalk/hooks/appdeploy/pre/46cache_node_modules.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/usr/bin/env bash      
      . /opt/elasticbeanstalk/env.vars
      CACHE_DIR=/var/node_modules
      if [ ! -d $CACHE_DIR ]; then
        mkdir $CACHE_DIR
      fi
      ln -s $CACHE_DIR $EB_APP_STAGING_DIR
  "/opt/elasticbeanstalk/hooks/appdeploy/pre/50npm.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/usr/bin/env bash
      . /opt/elasticbeanstalk/env.vars
      cd /usr/local/bin
      mkdir ffmpeg
      cd ffmpeg
      wget -O /tmp/ffmpeg.tar.xz https://www.johnvansickle.com/ffmpeg/old-releases/ffmpeg-4.0.3-64bit-static.tar.xz
      if [ ! -d /opt/ffmpeg ] ; then mkdir -p /opt/ffmpeg; fi
      tar xvf /tmp/ffmpeg.tar.xz -C /opt/ffmpeg --strip 1
      if [[ ! -f /usr/bin/ffmpeg ]] ; then ln -s /opt/ffmpeg/ffmpeg /usr/bin/ffmpeg; fi
      if [[ ! -f /usr/bin/ffprobe ]] ; then ln -s /opt/ffmpeg/ffprobe /usr/bin/ffprobe; fi
      if [ `pecl list | grep imagick` ] ; then pecl install -f imagick; fi
      PATH=$PATH:`ls -td /opt/elasticbeanstalk/node-install/node-* | head -1`/bin
      cd $EB_APP_STAGING_DIR
      chmod 755 -R /tmp
      set -xe
      sudo /opt/elasticbeanstalk/containerfiles/ebnode.py --action npm install --production --unsafe-perm=true --ignore-scripts
  "/opt/elasticbeanstalk/hooks/appdeploy/pre/55npm_cleanup.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/usr/bin/env bash
      rm -rf /tmp/npm-*
  "/opt/elasticbeanstalk/hooks/appdeploy/post/99_restart_delayed_job.sh":
        mode: "000755"
        owner: root
        group: root
        content: |
            #!/usr/bin/env bash
            npm install @discordjs/opus --unsafe-perm
  